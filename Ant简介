但是随着传统软件开发转向互联网软件开发，以及DevOps和云部署模型逐渐成熟，人们逐渐发现了问题：

这样划分在前端团队和后端团队里就不会有业务分析人员和测试，这样就会导致该项目转变为瀑布开发流程，任何一个需求变更反馈慢，无法满足互联网软件的快节奏。另外，前端团队和后端团队太大，会造成沟通问题，对于同一个Story两个团队的人都没有对其商业价值有完整的认识，这样会造成没有人最终负责，出现问题互相推诿等情况。笔者目前正在一个150人的大型项目上，该项目的前三个月就是按照这种功能型团队来划分的，在这三个月中项目就出现了进度缓慢，Bug多等问题。

难以维护
按照传统软件开发，通常都由软件开发团队开发系统，开发完成之后会由维护团队进行部署和维护。对于一个代码量巨大的系统，要修改一个Bug需要查看的代码量可想而知，并且如果没有足够的自动测试，任何修改都无法估量对已有代码的影响。同时修改任何内容都需要重新编译和重新部署。


不易扩展：
扩展包括水平扩展和垂直扩展，通常都是通过反向代理和JAVA EE容器集群来达到水平扩展。虽然能够解决，但是需要水平扩展的并不是这个大系统中的所有部分，对于一个大型系统来说，对硬件配置的要求很高，就为了系统中的一小部分容量的需求，而需要准备大量昂贵的设备，实际上是一种浪费。对于垂直扩展，
1. 反向代理+水平扩展  2. 对于



项目太大并且所有的人都工作在同一个项目上的时候，会造成源代码目录结构太大，而这么多人使用同一个目录结构会经常造成代码冲突、有人等待CI Pipeline等情况，同时代码量大也会导致本地和CI构建慢，反馈不及时的问题。同时，也因为代码太多，要想在开发人员的本地运行起来，需要修改的配置太多，运行速度也很慢。


互联网软件开发的特点是所谓“小步快跑”
。
（
1
）软件开发的周期短，
节奏快
。
（
2
）
分特性上线
。
先上线一些功能
，
然后再去改进
。
（
3
）
系统优化要大
于大规模的重构
，
不会动不动就推翻
，
从头再来
。
（
4
）
对
bug
的容忍度比传统的
软件开发大。如果有
bug
，马上修改，再改进上线
